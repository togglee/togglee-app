{"version":3,"sources":["components/default/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["TOGGLE_TYPES","OPERATIONS_TYPES","DefaultPage","finishedLoading","useEffect","useState","toggles","data","setData","processData","setProcessData","changeData","field","value","a","result","map","toggle","mappedToggle","name","type","conditions","filter","condition","undefined","JSON","parse","stringify","length","updateToggle","index","indexToChange","updateCondition","toggleIndex","Table","striped","hover","size","data-testid","className","Button","onClick","icon","Form","Control","placeholder","onChange","event","target","as","required","uuid","checked","indexCondition","operation","_","indexDelete","src","Default","props","library","add","fab","far","fas","Loading","Component","rest","isLoading","setIsLoading","err","navigate","Modal","show","keyboard","backdrop","centered","Body","PublicRoute","App","id","Navbar","Brand","href","alt","width","height","default","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fdedbed.chunk.js","sourcesContent":["import * as React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport { Table, Button, Form } from \"react-bootstrap\"\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\nimport { v4 as uuid } from 'uuid'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\nimport ReactJson from 'react-json-view'\nimport \"./index.scss\"\n\nconst TOGGLE_TYPES = [\"release\", \"context\"]\nconst OPERATIONS_TYPES = [\"eq\", \"ne\", \"gt\", \"ge\", \"lt\", \"le\"]\n\nconst DefaultPage = ({ finishedLoading }) => {\n  useEffect(finishedLoading ,[finishedLoading]);\n  const [data,setData] = useState({\n      toggles:[]\n  });\n  const [processData,setProcessData] = useState();\n  const changeData = async (field, value) => {\n    const result = {...data, [field]: value }\n    setData(result)\n    setProcessData({\n      toggles: result.toggles\n      .map(toggle => {\n\n        const mappedToggle = {\n          name: toggle.name,\n          type: toggle.type,\n          conditions: toggle.type=== TOGGLE_TYPES[1]? toggle.conditions.filter(condition => condition.field && condition.value) : undefined,\n          value: toggle.type=== TOGGLE_TYPES[0]? toggle.value : undefined,\n        }\n        return JSON.parse(JSON.stringify(mappedToggle))\n      }).filter(toggle => \n        toggle.name \n        && (\n          toggle.type ===TOGGLE_TYPES[0] || toggle.conditions.length > 0))\n    })\n  }\n  const updateToggle = async (index, field, value) =>\n    changeData(\"toggles\", data.toggles.map((toggle, indexToChange) => index === indexToChange ? {...toggle, [field]: value } : toggle ))\n  const updateCondition = async (toggleIndex, conditions, index, value) =>\n    updateToggle(toggleIndex, \"conditions\", conditions.map((condition, indexToChange) => index === indexToChange ? value : condition))\n  return (<>\n    <Table striped hover size=\"sm\" data-testid=\"main-table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>State</th>\n                <th><div className=\"actions\">\n                    Actions\n                    <Button onClick={() => changeData(\"toggles\", [...data.toggles, {\n                      name: undefined,\n                      type: TOGGLE_TYPES[0],\n                      conditions: [],\n                      value: false,\n                    }])}><FontAwesomeIcon icon={['fas', 'plus']} /></Button>\n                </div></th>\n            </tr>\n        </thead>\n        <tbody>\n          {\n            data.toggles.map( (toggle, index) =>(\n              <tr key={`toggle_${index}`}>\n                <td>\n                  <Form.Control type=\"text\" placeholder=\"Enter Name\" value={ toggle.name } onChange={(event) => updateToggle(index, \"name\", event.target.value)} />\n                </td>\n                <td><Form.Control \n                        as=\"select\"\n                        onChange={event => updateToggle(index,\"type\", event.target.value)}\n                        value={toggle.type} \n                        required>\n                    {\n                        TOGGLE_TYPES.map(type => \n                            <option key={`toggleType${uuid()}`}>{type}</option>\n                        )\n                    }\n                    </Form.Control>\n                </td>\n                <td>{toggle.type === TOGGLE_TYPES[0] \n                    ? (<BootstrapSwitchButton\n                        checked={toggle.value}\n                        onChange={(checked) => updateToggle(index,\"value\", checked)}/>) \n                    : toggle.conditions.map((condition, indexCondition) => (<>\n                          <Form.Control type=\"text\" placeholder=\"Enter field\" value={ condition.field } onChange={(event) => updateCondition(index, toggle.conditions, indexCondition, {...condition, field: event.target.value})} />\n                          <Form.Control \n                              as=\"select\"\n                              onChange={event => updateCondition(index, toggle.conditions, indexCondition, {...condition, operation: event.target.value})}\n                              value={condition.operation} \n                              required>\n                          {\n                              OPERATIONS_TYPES.map(type => \n                                  <option key={`OperationType${uuid()}`}>{type}</option>\n                              )\n                          }\n                          </Form.Control>\n                          <Form.Control type=\"text\" placeholder=\"Enter value\" value={ condition.value } onChange={(event) => updateCondition(index, toggle.conditions, indexCondition, {...condition, value: event.target.value})} />\n                          <Button onClick={() => updateToggle(index, \"conditions\", toggle.conditions.filter((_, indexDelete) => indexCondition !== indexDelete))}><FontAwesomeIcon icon={['fas', 'trash']} /></Button>\n                        </>))\n                      }\n                </td>\n                <td>\n                    <div className=\"actions\">\n\n                      {toggle.type === TOGGLE_TYPES[1] && <Button onClick={() => updateToggle(index,\"conditions\", [...toggle.conditions, {\n                        field: undefined,\n                        value:undefined,\n                        operation: OPERATIONS_TYPES[0]\n                      }]) }><FontAwesomeIcon icon={['fas', 'plus']} /></Button> }\n                      <Button onClick={() => changeData(\"toggles\", data.toggles.filter((_, indexDelete) => index !== indexDelete))}><FontAwesomeIcon icon={['fas', 'trash']} /></Button>\n                    </div>\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n    </Table>\n    <ReactJson src={processData} name={false} />\n  </>)\n}\n\nexport const Default = (props) => <DefaultPage {...props} />;\n","import React from \"react\";\nimport { Router, navigate } from \"@reach/router\";\nimport {Navbar, Modal} from \"react-bootstrap\";\nimport { Default } from \"./components/default/index.jsx\"\nimport { useState } from 'react'\nimport { Grid } from 'svg-loaders-react'\nimport './App.scss'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { far } from \"@fortawesome/free-regular-svg-icons\"\nimport { fas } from \"@fortawesome/free-solid-svg-icons\"\n\nlibrary.add(fab, far, fas)\n\nconst Loading = ({ Component, ...rest }) =>{\n  const [isLoading,setIsLoading] = useState(true);\n  return (<>\n    <Component {...rest} finishedLoading={(err) => {\n      setIsLoading(false)\n      if(err)\n        navigate(`/error/${err}`)\n    }} />\n    <Modal\n        show={isLoading}\n        keyboard={false}\n        backdrop=\"static\"\n        size=\"sm\"\n        centered\n      >\n        <Modal.Body>\n          <Grid />\n        </Modal.Body>\n      </Modal>\n    </>)\n}\n\nconst PublicRoute = ({ ...rest }) => (\n  <Loading {...rest} />\n);\n\nconst App = () => {\n  return (<div id=\"main\">\n    <Navbar>\n      <Navbar.Brand href=\"/\">\n        <img\n          alt=\"\"\n          src=\"./logo.webp\"\n          width=\"110\"\n          height=\"42\"\n          className=\"d-inline-block align-top\"\n        />\n      </Navbar.Brand>\n    </Navbar>\n   <Router>\n     <PublicRoute default path=\"default\" Component={Default} />\n   </Router>\n </div>)\n };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}